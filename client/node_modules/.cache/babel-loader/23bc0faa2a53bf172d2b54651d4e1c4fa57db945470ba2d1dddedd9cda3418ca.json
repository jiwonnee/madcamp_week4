{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\MadCamp\\\\madcamp_week4\\\\client\\\\src\\\\component\\\\swissPages\\\\PlayerInfo.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { matchRoutes } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [players, setPlayer] = useState([]);\n  function comp(playerA, playerB) {\n    if (playerA.win !== playerB.win) return playerB.win - playerA.win; //양수면 B가 위로\n    if (playerA.buchholz !== playerB.buchholz) return playerB.buchholz - playerA.buchholz;\n    if (playerA.opponentId.includes(-1) !== playerB.opponentId.includes(-1)) {\n      if (playerA.opponentId.includes(-1)) return 1;else return -1;\n    }\n    if (playerA.opponentId.includes(playerB.id)) {\n      if (playerA.matchResult[playerA.opponentId.indexOf(playerB.id)] === 2) return -1;\n      if (playerB.matchResult[playerB.opponentId.indexOf(playerA.id)] === 2) return 1;\n    }\n    if (playerA.maxWinStreak !== playerB.maxWinStreak) return playerB.maxWinStreak - playerA.maxWinStreak;\n    return playerB.winStreakStartRound - playerA.winStreakStartRound;\n  }\n  const addPlayer = newPlayer => {\n    const sortedPlayers = [...players, {\n      ...newPlayer,\n      id: players.length + 1\n    }].sort(comp).map((player, index) => ({\n      ...player,\n      rank: index + 1\n    }));\n    setPlayer(sortedPlayers);\n  };\n  const rankPlayers = () => {\n    const sortedPlayers = [...players].sort(comp).map((player, index) => ({\n      ...player,\n      rank: index + 1\n    }));\n    setPlayer(sortedPlayers);\n  };\n  const removePlayer = id => {\n    setPlayer(players.filter(p => p.id !== id));\n  };\n  const setPlayerState = (id, changeState) => {\n    setPlayer(players.map(player => player.id === id ? {\n      ...player,\n      state: changeState\n    } : player));\n  };\n  const calculateUserInfo = player => {\n    let w = 0;\n    let l = 0;\n    let sc = 0;\n    //let buch = 0;\n    for (let i = 0; i < player.opponentId.length; i++) {\n      sc = sc + player.matchResult[i];\n      if (player.matchResult[i] === 2) {\n        w = w + 1;\n      } else if (player.matchResult[i] === 0) {\n        l = l + 1;\n      }\n      /*\r\n      players.map(p => {\r\n          if(p.id === player.opponentId[i]) buch = buch + p.score;\r\n      });\r\n      */\n    }\n    let currentStart = -1; // 현재 연속 수열의 시작 인덱스\n    let currentLength = 0; // 현재 연속 길이\n    let maxLength = 0; // 최대 연속 길이\n    let maxStart = -1; // 최대 연속 길이의 시작 인덱스\n\n    for (let i = 0; i < player.matchResult.length; i++) {\n      if (player.matchResult[i] === 2) {\n        if (currentStart === -1) {\n          currentStart = i;\n        }\n        currentLength += 1;\n      } else {\n        if (currentLength > maxLength) {\n          maxLength = currentLength;\n          maxStart = currentStart;\n        }\n        currentStart = -1;\n        currentLength = 0;\n      }\n    }\n    if (currentLength > maxLength) {\n      maxLength = currentLength;\n      maxStart = currentStart;\n    }\n    const retPlayer = {\n      id: player.id,\n      name: player.name,\n      state: player.state,\n      rank: player.rank,\n      win: w,\n      loss: l,\n      score: sc,\n      //buchholz: buch,\n      buchholz: player.buchholz,\n      maxWinStreak: maxLength,\n      winStreakStartRound: maxStart,\n      opponentId: player.opponentId,\n      matchResult: player.matchResult\n    };\n    return retPlayer;\n  };\n  const addOppFromRound = round => {\n    const tmpPlayers1 = players.map(player => {\n      let updatedOpponentId = [...player.opponentId];\n      let updatedMatchResult = [...player.matchResult];\n      if (player.state === false) {\n        updatedOpponentId = [...updatedOpponentId, -1];\n        updatedMatchResult = [...updatedMatchResult, 0];\n      } else {\n        round.forEach(match => {\n          if (player.id === match.player1.id) {\n            updatedOpponentId = [...updatedOpponentId, match.player2.id];\n            updatedMatchResult = [...updatedMatchResult, match.player1Res];\n          } else if (player.id === match.player2.id) {\n            updatedOpponentId = [...updatedOpponentId, match.player1.id];\n            updatedMatchResult = [...updatedMatchResult, match.player2Res];\n          }\n        });\n      }\n      const updatedPlayer = {\n        ...player,\n        opponentId: updatedOpponentId,\n        matchResult: updatedMatchResult\n      };\n      return updatedPlayer;\n    });\n    const tmpPlayers = tmpPlayers1.map(player => calculateUserInfo(player));\n    const resPlayers = tmpPlayers.map(player => {\n      let buch = 0;\n      for (let i = 0; i < player.opponentId.length; i++) {\n        tmpPlayers.map(p => {\n          if (p.id === player.opponentId[i]) {\n            //console.log(\"For player id \"+player.id+\" opponent id \"+p.id+\" score is \"+p.score);\n            buch = buch + p.score;\n          }\n        });\n      }\n      return {\n        ...player,\n        buchholz: buch\n      };\n    });\n    const sortedPlayers = [...resPlayers].sort(comp).map((player, index) => ({\n      ...player,\n      rank: index + 1\n    }));\n    setPlayer(sortedPlayers);\n  };\n  const updateResFromMatch = (num, match) => {\n    const tmpPlayers1 = players.map(player => {\n      let updatedMatchResult = [...player.matchResult];\n      if (player.id === match.player1.id) {\n        updatedMatchResult[num - 1] = match.player1Res;\n      } else if (player.id === match.player2.id) {\n        updatedMatchResult[num - 1] = match.player2Res;\n      }\n      const updatedPlayer = {\n        ...player,\n        matchResult: updatedMatchResult\n      };\n      return updatedPlayer;\n    });\n    const tmpPlayers = tmpPlayers1.map(player => calculateUserInfo(player));\n    const resPlayers = tmpPlayers.map(player => {\n      let buch = 0;\n      for (let i = 0; i < player.opponentId.length; i++) {\n        tmpPlayers.map(p => {\n          if (p.id === player.opponentId[i]) {\n            //console.log(\"For player id \"+player.id+\" opponent id \"+p.id+\" score is \"+p.score);\n            buch = buch + p.score;\n          }\n        });\n      }\n      return {\n        ...player,\n        buchholz: buch\n      };\n    });\n    const sortedPlayers = [...resPlayers].sort(comp).map((player, index) => ({\n      ...player,\n      rank: index + 1\n    }));\n    setPlayer(sortedPlayers);\n  };\n  const value = {\n    players,\n    addPlayer,\n    removePlayer,\n    setPlayerState,\n    rankPlayers,\n    addOppFromRound,\n    updateResFromMatch\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n};\n_s(PlayerProvider, \"9JR9tQajra/lvTXCY8OAff+WCDc=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  return useContext(PlayerContext);\n};\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","matchRoutes","jsxDEV","_jsxDEV","PlayerContext","PlayerProvider","children","_s","players","setPlayer","comp","playerA","playerB","win","buchholz","opponentId","includes","id","matchResult","indexOf","maxWinStreak","winStreakStartRound","addPlayer","newPlayer","sortedPlayers","length","sort","map","player","index","rank","rankPlayers","removePlayer","filter","p","setPlayerState","changeState","state","calculateUserInfo","w","l","sc","i","currentStart","currentLength","maxLength","maxStart","retPlayer","name","loss","score","addOppFromRound","round","tmpPlayers1","updatedOpponentId","updatedMatchResult","forEach","match","player1","player2","player1Res","player2Res","updatedPlayer","tmpPlayers","resPlayers","buch","updateResFromMatch","num","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","$RefreshReg$"],"sources":["C:/Users/USER/Documents/MadCamp/madcamp_week4/client/src/component/swissPages/PlayerInfo.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { matchRoutes } from \"react-router-dom\";\r\n\r\nconst PlayerContext = createContext();\r\n\r\nexport const PlayerProvider = ({children}) => {\r\n    const [players, setPlayer] = useState([]);\r\n\r\n    function comp(playerA, playerB) {\r\n        if(playerA.win !== playerB.win) return playerB.win - playerA.win; //양수면 B가 위로\r\n        if(playerA.buchholz !== playerB.buchholz) return playerB.buchholz - playerA.buchholz;\r\n        if(playerA.opponentId.includes(-1) !== playerB.opponentId.includes(-1)){\r\n            if(playerA.opponentId.includes(-1)) return 1;\r\n            else return -1;\r\n        }\r\n        if(playerA.opponentId.includes(playerB.id)){\r\n            if(playerA.matchResult[playerA.opponentId.indexOf(playerB.id)] === 2) return -1;\r\n            if(playerB.matchResult[playerB.opponentId.indexOf(playerA.id)] === 2) return 1;\r\n        }\r\n        if(playerA.maxWinStreak !== playerB.maxWinStreak) return playerB.maxWinStreak - playerA.maxWinStreak;\r\n        return playerB.winStreakStartRound - playerA.winStreakStartRound;\r\n    }\r\n\r\n    const addPlayer = (newPlayer) => {\r\n        const sortedPlayers = [...players, {...newPlayer, id: players.length + 1}]\r\n            .sort(comp)\r\n            .map((player, index) => ({\r\n                ...player,\r\n                rank: index + 1\r\n            }));\r\n        setPlayer(sortedPlayers);\r\n    };\r\n\r\n    const rankPlayers = () => {\r\n        const sortedPlayers = [...players]\r\n            .sort(comp)\r\n            .map((player, index) => ({\r\n                ...player,\r\n                rank: index + 1\r\n            }));\r\n        setPlayer(sortedPlayers);\r\n    }\r\n\r\n    const removePlayer = (id) => {\r\n        setPlayer(players.filter(p => p.id !== id));\r\n    };\r\n\r\n    const setPlayerState = (id, changeState) => {\r\n        setPlayer(players.map(player =>\r\n            player.id === id? {...player, state: changeState} : player\r\n        ));\r\n    }\r\n\r\n    const calculateUserInfo = (player) => {\r\n        let w = 0;\r\n        let l = 0;\r\n        let sc = 0;\r\n        //let buch = 0;\r\n        for(let i = 0; i < player.opponentId.length; i++){\r\n            sc = sc + player.matchResult[i];\r\n            if(player.matchResult[i] === 2){\r\n                w = w + 1;\r\n            } else if(player.matchResult[i] === 0){\r\n                l = l + 1;\r\n            }\r\n            /*\r\n            players.map(p => {\r\n                if(p.id === player.opponentId[i]) buch = buch + p.score;\r\n            });\r\n            */\r\n        }\r\n        \r\n        let currentStart = -1; // 현재 연속 수열의 시작 인덱스\r\n        let currentLength = 0; // 현재 연속 길이\r\n        let maxLength = 0; // 최대 연속 길이\r\n        let maxStart = -1; // 최대 연속 길이의 시작 인덱스\r\n\r\n        for (let i = 0; i < player.matchResult.length; i++) {\r\n            if (player.matchResult[i] === 2) {\r\n                if (currentStart === -1) {\r\n                    currentStart = i; \r\n                }\r\n                currentLength += 1;\r\n                } else {\r\n                    if (currentLength > maxLength) {\r\n                        maxLength = currentLength;\r\n                        maxStart = currentStart;\r\n                    }\r\n                    currentStart = -1;\r\n                    currentLength = 0;\r\n                }\r\n        }\r\n\r\n        if (currentLength > maxLength) {\r\n            maxLength = currentLength;\r\n            maxStart = currentStart;\r\n        }\r\n        \r\n        const retPlayer = {\r\n            id: player.id,\r\n            name: player.name,\r\n            state: player.state,\r\n            rank: player.rank,\r\n            win: w,\r\n            loss: l,\r\n            score: sc,\r\n            //buchholz: buch,\r\n            buchholz: player.buchholz,\r\n            maxWinStreak: maxLength,\r\n            winStreakStartRound: maxStart,\r\n            opponentId: player.opponentId,\r\n            matchResult: player.matchResult,\r\n        }\r\n\r\n        return retPlayer;\r\n    }\r\n\r\n    const addOppFromRound = (round) => {\r\n        const tmpPlayers1 = players.map(player => {\r\n\r\n            let updatedOpponentId = [...player.opponentId];\r\n            let updatedMatchResult = [...player.matchResult];\r\n\r\n            if(player.state === false){\r\n                updatedOpponentId = [...updatedOpponentId, -1];\r\n                updatedMatchResult = [...updatedMatchResult, 0];\r\n            } else {\r\n                round.forEach(match => {\r\n                    if (player.id === match.player1.id) {\r\n                        updatedOpponentId = [...updatedOpponentId, match.player2.id];\r\n                        updatedMatchResult = [...updatedMatchResult, match.player1Res];\r\n                    } else if (player.id === match.player2.id) {\r\n                        updatedOpponentId = [...updatedOpponentId, match.player1.id];\r\n                        updatedMatchResult = [...updatedMatchResult, match.player2Res];\r\n                    }\r\n                });\r\n            }\r\n            const updatedPlayer = {\r\n                ...player,\r\n                opponentId: updatedOpponentId,\r\n                matchResult: updatedMatchResult\r\n            }\r\n\r\n            return updatedPlayer;\r\n        });\r\n\r\n        const tmpPlayers = tmpPlayers1.map(player => calculateUserInfo(player));\r\n\r\n        const resPlayers = tmpPlayers.map(player => {\r\n            let buch = 0;\r\n            for(let i = 0; i < player.opponentId.length; i++){\r\n                tmpPlayers.map(p => {\r\n                    if(p.id === player.opponentId[i]){\r\n                        //console.log(\"For player id \"+player.id+\" opponent id \"+p.id+\" score is \"+p.score);\r\n                        buch = buch + p.score;\r\n                    }\r\n                });\r\n            }\r\n            return {...player, buchholz: buch};\r\n        });\r\n\r\n        const sortedPlayers = [...resPlayers]\r\n            .sort(comp)\r\n            .map((player, index) => ({\r\n                ...player,\r\n                rank: index + 1\r\n            }));\r\n        setPlayer(sortedPlayers);\r\n    }\r\n\r\n    const updateResFromMatch = (num, match) => {\r\n        const tmpPlayers1 = players.map(player => {\r\n            let updatedMatchResult = [...player.matchResult];\r\n\r\n            if (player.id === match.player1.id) {\r\n                updatedMatchResult[num - 1] = match.player1Res;\r\n            } else if (player.id === match.player2.id) {\r\n                updatedMatchResult[num - 1] = match.player2Res;\r\n            }\r\n\r\n            const updatedPlayer = {\r\n                ...player,\r\n                matchResult: updatedMatchResult\r\n            }\r\n\r\n            return updatedPlayer;\r\n        });\r\n\r\n        const tmpPlayers = tmpPlayers1.map(player => calculateUserInfo(player));\r\n\r\n        const resPlayers = tmpPlayers.map(player => {\r\n            let buch = 0;\r\n            for(let i = 0; i < player.opponentId.length; i++){\r\n                tmpPlayers.map(p => {\r\n                    if(p.id === player.opponentId[i]){\r\n                        //console.log(\"For player id \"+player.id+\" opponent id \"+p.id+\" score is \"+p.score);\r\n                        buch = buch + p.score;\r\n                    }\r\n                });\r\n            }\r\n            return {...player, buchholz: buch};\r\n        });\r\n\r\n        const sortedPlayers = [...resPlayers]\r\n            .sort(comp)\r\n            .map((player, index) => ({\r\n                ...player,\r\n                rank: index + 1\r\n            }));\r\n        \r\n        setPlayer(sortedPlayers);\r\n    }\r\n\r\n    const value = {\r\n        players,\r\n        addPlayer,\r\n        removePlayer,\r\n        setPlayerState,\r\n        rankPlayers,\r\n        addOppFromRound,\r\n        updateResFromMatch,\r\n    };\r\n\r\n    return (\r\n        <PlayerContext.Provider value={value}>\r\n            {children}\r\n        </PlayerContext.Provider>\r\n    )\r\n\r\n};\r\n\r\nexport const usePlayer = () => useContext(PlayerContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}